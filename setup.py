#!/usr/bin/env python3
"""
Portfolio Tracker - Setup Script
Automatycznie konfiguruje ≈õrodowisko i instaluje zale≈ºno≈õci.
"""

import os
import sys
import subprocess
import platform
import argparse

def check_python_version():
    """Sprawdza wersjƒô Pythona."""
    if sys.version_info < (3, 8):
        print("‚ùå Portfolio Tracker wymaga Python 3.8 lub nowszego")
        print(f"üí° Aktualna wersja: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def create_directories():
    """Tworzy niezbƒôdne katalogi."""
    directories = [
        "logs",
        "backups", 
        "exports",
        "data"
    ]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"üìÅ Utworzono katalog: {directory}")
        else:
            print(f"‚úÖ Katalog istnieje: {directory}")

def install_requirements():
    """Instaluje wymagane pakiety."""
    print("üì¶ Instalowanie zale≈ºno≈õci...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ Wszystkie zale≈ºno≈õci zainstalowane pomy≈õlnie")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå B≈ÇƒÖd podczas instalacji zale≈ºno≈õci: {e}")
        return False

def initialize_database(reset=False):
    """Inicjalizuje bazƒô danych."""
    print("üóÑÔ∏è Inicjalizowanie bazy danych...")
    
    try:
        # Import lokalny, ≈ºeby sprawdziƒá czy modu≈Çy sƒÖ dostƒôpne
        from db import init_database, backup_database, check_database_structure
        
        # Utw√≥rz kopiƒô zapasowƒÖ je≈õli istnieje i nie resetujemy
        if os.path.exists("portfolio.db") and not reset:
            print("üíæ Tworzenie kopii zapasowej istniejƒÖcej bazy...")
            backup_database()
        
        # Inicjalizuj bazƒô
        init_database()
        
        # Sprawd≈∫ strukturƒô
        print("\nüìä Sprawdzanie struktury bazy danych:")
        check_database_structure()
        
        print("‚úÖ Baza danych zainicjalizowana")
        return True
    except ImportError as e:
        print(f"‚ùå Nie mo≈ºna zaimportowaƒá modu≈Çu db: {e}")
        return False
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas inicjalizacji bazy: {e}")
        return False

def create_config_file():
    """Tworzy plik konfiguracyjny."""
    if not os.path.exists("config.py"):
        if os.path.exists("config.example.py"):
            try:
                with open("config.example.py", "r", encoding="utf-8") as src:
                    content = src.read()
                
                with open("config.py", "w", encoding="utf-8") as dst:
                    dst.write(content)
                
                print("‚úÖ Utworzono config.py z przyk≈Çadowej konfiguracji")
            except Exception as e:
                print(f"‚ùå B≈ÇƒÖd podczas tworzenia config.py: {e}")
        else:
            print("‚ö†Ô∏è Nie znaleziono config.example.py")
    else:
        print("‚úÖ config.py ju≈º istnieje")

def check_system_dependencies():
    """Sprawdza zale≈ºno≈õci systemowe."""
    print("üîç Sprawdzanie zale≈ºno≈õci systemowych...")
    
    # Sprawd≈∫ dostƒôpno≈õƒá git (opcjonalne)
    try:
        subprocess.run(["git", "--version"], 
                      capture_output=True, check=True)
        print("‚úÖ Git dostƒôpny")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è Git niedostƒôpny (opcjonalne)")
    
    # Sprawd≈∫ system operacyjny
    os_name = platform.system()
    print(f"üñ•Ô∏è System: {os_name} {platform.release()}")
    
    if os_name == "Windows":
        print("üí° Windows wykryty - sprawd≈∫ czy masz zainstalowany Microsoft Visual C++")
    elif os_name == "Darwin":
        print("üçé macOS wykryty")
    elif os_name == "Linux":
        print("üêß Linux wykryty")

def run_tests():
    """Uruchamia podstawowe testy."""
    print("üß™ Uruchamianie podstawowych test√≥w...")
    
    try:
        # Test importu g≈Ç√≥wnych modu≈Ç√≥w
        import streamlit
        print("‚úÖ Streamlit importowany poprawnie")
        
        import pandas
        print("‚úÖ Pandas importowany poprawnie")
        
        import plotly
        print("‚úÖ Plotly importowany poprawnie")
        
        import requests
        print("‚úÖ Requests importowany poprawnie")
        
        import yfinance
        print("‚úÖ yfinance importowany poprawnie")
        
        # Test po≈ÇƒÖczenia z bazƒÖ danych
        from db import execute_query
        result = execute_query("SELECT COUNT(*) as count FROM stocks")
        print(f"‚úÖ Po≈ÇƒÖczenie z bazƒÖ danych: {result[0]['count']} akcji w bazie")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå B≈ÇƒÖd importu: {e}")
        return False
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd test√≥w: {e}")
        return False

def reset_database():
    """Resetuje bazƒô danych do stanu poczƒÖtkowego."""
    print("üîÑ Resetowanie bazy danych...")
    
    response = input("‚ö†Ô∏è To usunie wszystkie dane! Kontynuowaƒá? (tak/nie): ").lower()
    if response not in ['tak', 'yes', 'y', 't']:
        print("‚ùå Anulowano resetowanie bazy danych")
        return False
    
    try:
        # Utw√≥rz kopiƒô zapasowƒÖ przed resetem
        from db import backup_database, init_database
        
        if os.path.exists("portfolio.db"):
            print("üíæ Tworzenie kopii zapasowej przed resetem...")
            backup_database()
        
        # Usu≈Ñ istniejƒÖcƒÖ bazƒô
        if os.path.exists("portfolio.db"):
            os.remove("portfolio.db")
            print("üóëÔ∏è Usuniƒôto starƒÖ bazƒô danych")
        
        # Utw√≥rz nowƒÖ bazƒô
        init_database()
        print("‚úÖ Baza danych zosta≈Ça zresetowana")
        return True
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd resetowania bazy danych: {e}")
        return False

def display_next_steps():
    """Wy≈õwietla nastƒôpne kroki."""
    print("\n" + "="*50)
    print("üéâ Setup zako≈Ñczony pomy≈õlnie!")
    print("="*50)
    print("\nüìã Nastƒôpne kroki:")
    print("1. Uruchom aplikacjƒô: python run.py")
    print("   lub: streamlit run app.py")
    print("\n2. Otw√≥rz w przeglƒÖdarce: http://localhost:8501")
    print("\n3. Dodaj pierwszƒÖ transakcjƒô w zak≈Çadce 'Akcje'")
    print("\n4. Sprawd≈∫ ustawienia w pliku config.py")
    print("\nüí° Wskaz√≥wki:")
    print("‚Ä¢ Regularnie r√≥b backup pliku portfolio.db")
    print("‚Ä¢ Aktualizuj ceny przed wa≈ºnymi decyzjami")
    print("‚Ä¢ Sprawd≈∫ obliczenia podatkowe z doradcƒÖ")
    print("\nüìö Dokumentacja: README.md")
    print("üêõ Problemy: Sprawd≈∫ logi w katalogu logs/")
    print("\nüîß Dodatkowe opcje:")
    print("‚Ä¢ Reset bazy danych: python setup.py --reset-db")
    print("‚Ä¢ Tylko instalacja: python setup.py --install-only")

def main():
    """G≈Ç√≥wna funkcja setup."""
    parser = argparse.ArgumentParser(description='Portfolio Tracker Setup')
    parser.add_argument('--reset-db', action='store_true', help='Resetuj bazƒô danych')
    parser.add_argument('--install-only', action='store_true', help='Tylko instaluj zale≈ºno≈õci')
    parser.add_argument('--skip-tests', action='store_true', help='Pomi≈Ñ testy')
    
    args = parser.parse_args()
    
    print("üöÄ Portfolio Tracker - Setup")
    print("="*40)
    
    # Obs≈Çuga specjalnych opcji
    if args.reset_db:
        if reset_database():
            print("‚úÖ Baza danych zosta≈Ça zresetowana!")
        else:
            print("‚ùå B≈ÇƒÖd resetowania bazy danych")
        return
    
    # Sprawdzenia wstƒôpne
    if not check_python_version():
        sys.exit(1)
    
    check_system_dependencies()
    
    # Tworzenie struktury
    create_directories()
    create_config_file()
    
    # Instalacja zale≈ºno≈õci
    if not install_requirements():
        print("‚ùå Setup nie powi√≥d≈Ç siƒô - problem z instalacjƒÖ pakiet√≥w")
        sys.exit(1)
    
    if args.install_only:
        print("‚úÖ Instalacja zako≈Ñczona!")
        return
    
    # Inicjalizacja bazy
    if not initialize_database():
        print("‚ùå Setup nie powi√≥d≈Ç siƒô - problem z bazƒÖ danych")
        sys.exit(1)
    
    # Testy
    if not args.skip_tests and not run_tests():
        print("‚ùå Setup nie powi√≥d≈Ç siƒô - problem z testami")
        sys.exit(1)
    
    # Podsumowanie
    display_next_steps()

if __name__ == "__main__":
    main()