#!/usr/bin/env python3
"""
Portfolio Tracker - Setup Script
Automatycznie konfiguruje ≈õrodowisko i instaluje zale≈ºno≈õci.
"""

import os
import sys
import subprocess
import platform

def check_python_version():
    """Sprawdza wersjƒô Pythona."""
    if sys.version_info < (3, 8):
        print("‚ùå Portfolio Tracker wymaga Python 3.8 lub nowszego")
        print(f"üí° Aktualna wersja: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def create_directories():
    """Tworzy niezbƒôdne katalogi."""
    directories = [
        "logs",
        "backups", 
        "exports",
        "data"
    ]
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"üìÅ Utworzono katalog: {directory}")
        else:
            print(f"‚úÖ Katalog istnieje: {directory}")

def install_requirements():
    """Instaluje wymagane pakiety."""
    print("üì¶ Instalowanie zale≈ºno≈õci...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ Wszystkie zale≈ºno≈õci zainstalowane pomy≈õlnie")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå B≈ÇƒÖd podczas instalacji zale≈ºno≈õci: {e}")
        return False

def initialize_database():
    """Inicjalizuje bazƒô danych."""
    print("üóÑÔ∏è Inicjalizowanie bazy danych...")
    
    try:
        # Import lokalny, ≈ºeby sprawdziƒá czy modu≈Çy sƒÖ dostƒôpne
        from db import init_database
        init_database()
        print("‚úÖ Baza danych zainicjalizowana")
        return True
    except ImportError as e:
        print(f"‚ùå Nie mo≈ºna zaimportowaƒá modu≈Çu db: {e}")
        return False
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas inicjalizacji bazy: {e}")
        return False

def create_config_file():
    """Tworzy plik konfiguracyjny."""
    if not os.path.exists("config.py"):
        if os.path.exists("config.example.py"):
            try:
                with open("config.example.py", "r", encoding="utf-8") as src:
                    content = src.read()
                
                with open("config.py", "w", encoding="utf-8") as dst:
                    dst.write(content)
                
                print("‚úÖ Utworzono config.py z przyk≈Çadowej konfiguracji")
            except Exception as e:
                print(f"‚ùå B≈ÇƒÖd podczas tworzenia config.py: {e}")
        else:
            print("‚ö†Ô∏è Nie znaleziono config.example.py")
    else:
        print("‚úÖ config.py ju≈º istnieje")

def check_system_dependencies():
    """Sprawdza zale≈ºno≈õci systemowe."""
    print("üîç Sprawdzanie zale≈ºno≈õci systemowych...")
    
    # Sprawd≈∫ dostƒôpno≈õƒá git (opcjonalne)
    try:
        subprocess.run(["git", "--version"], 
                      capture_output=True, check=True)
        print("‚úÖ Git dostƒôpny")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è Git niedostƒôpny (opcjonalne)")
    
    # Sprawd≈∫ system operacyjny
    os_name = platform.system()
    print(f"üñ•Ô∏è System: {os_name} {platform.release()}")
    
    if os_name == "Windows":
        print("üí° Windows wykryty - sprawd≈∫ czy masz zainstalowany Microsoft Visual C++")
    elif os_name == "Darwin":
        print("üçé macOS wykryty")
    elif os_name == "Linux":
        print("üêß Linux wykryty")

def run_tests():
    """Uruchamia podstawowe testy."""
    print("üß™ Uruchamianie podstawowych test√≥w...")
    
    try:
        # Test importu g≈Ç√≥wnych modu≈Ç√≥w
        import streamlit
        print("‚úÖ Streamlit importowany poprawnie")
        
        import pandas
        print("‚úÖ Pandas importowany poprawnie")
        
        import plotly
        print("‚úÖ Plotly importowany poprawnie")
        
        import requests
        print("‚úÖ Requests importowany poprawnie")
        
        import yfinance
        print("‚úÖ yfinance importowany poprawnie")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå B≈ÇƒÖd importu: {e}")
        return False

def display_next_steps():
    """Wy≈õwietla nastƒôpne kroki."""
    print("\n" + "="*50)
    print("üéâ Setup zako≈Ñczony pomy≈õlnie!")
    print("="*50)
    print("\nüìã Nastƒôpne kroki:")
    print("1. Uruchom aplikacjƒô: python run.py")
    print("   lub: streamlit run app.py")
    print("\n2. Otw√≥rz w przeglƒÖdarce: http://localhost:8501")
    print("\n3. Dodaj pierwszƒÖ transakcjƒô w zak≈Çadce 'Akcje'")
    print("\n4. Sprawd≈∫ ustawienia w pliku config.py")
    print("\nüí° Wskaz√≥wki:")
    print("‚Ä¢ Regularnie r√≥b backup pliku portfolio.db")
    print("‚Ä¢ Aktualizuj ceny przed wa≈ºnymi decyzjami")
    print("‚Ä¢ Sprawd≈∫ obliczenia podatkowe z doradcƒÖ")
    print("\nüìö Dokumentacja: README.md")
    print("üêõ Problemy: Sprawd≈∫ logi w katalogu logs/")

def main():
    """G≈Ç√≥wna funkcja setup."""
    print("üöÄ Portfolio Tracker - Setup")
    print("="*40)
    
    # Sprawdzenia wstƒôpne
    if not check_python_version():
        sys.exit(1)
    
    check_system_dependencies()
    
    # Tworzenie struktury
    create_directories()
    create_config_file()
    
    # Instalacja zale≈ºno≈õci
    if not install_requirements():
        print("‚ùå Setup nie powi√≥d≈Ç siƒô - problem z instalacjƒÖ pakiet√≥w")
        sys.exit(1)
    
    # Inicjalizacja bazy
    if not initialize_database():
        print("‚ùå Setup nie powi√≥d≈Ç siƒô - problem z bazƒÖ danych")
        sys.exit(1)
    
    # Testy
    if not run_tests():
        print("‚ùå Setup nie powi√≥d≈Ç siƒô - problem z testami")
        sys.exit(1)
    
    # Podsumowanie
    display_next_steps()

if __name__ == "__main__":
    main()