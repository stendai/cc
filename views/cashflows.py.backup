import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
import plotly.express as px
import plotly.graph_objects as go

from repos.cashflow_repo import CashflowRepository
from repos.stock_repo import StockRepository
from services.nbp import nbp_service
from utils.formatting import (
    format_currency, format_percentage, format_gain_loss, 
    format_polish_date, get_status_color
)

def show():
    """Wy≈õwietla stronƒô zarzƒÖdzania przep≈Çywami pieniƒô≈ºnymi."""
    
    st.markdown("## üí∏ Przep≈Çywy pieniƒô≈ºne")
    
    # Tabs
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìä PrzeglƒÖd", "‚ûï Dodaj przep≈Çyw", "üìà Analiza", "üìã Historia", "üíπ ROI", "üè¶ MARGIN"
    ])
    
    with tab1:
        show_overview_tab()
    
    with tab2:
        show_add_cashflow_tab()
    
    with tab3:
        show_analysis_tab()
    
    with tab4:
        show_history_tab()
    
    with tab5:
        show_roi_tab()
    
    with tab6:
        show_margin_tab()

def show_overview_tab():
    """Wy≈õwietla przeglƒÖd przep≈Çyw√≥w pieniƒô≈ºnych."""
    
    st.markdown("### üìä PrzeglƒÖd przep≈Çyw√≥w pieniƒô≈ºnych")
    
    # Aktualny stan konta
    account_balance = CashflowRepository.get_account_balance()
    
    # Podsumowanie dla bie≈ºƒÖcego roku
    current_year = datetime.now().year
    summary = CashflowRepository.get_cashflow_summary(current_year)
    total_summary = CashflowRepository.get_cashflow_summary()
    
    # Metryki g≈Ç√≥wne
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        balance_color = "green" if account_balance >= 0 else "red"
        st.metric(
            "üí∞ Stan konta",
            format_currency(account_balance)
        )
    
    with col2:
        net_flow = summary.get('net_cashflow', 0) or 0
        st.metric(
            f"üìä Przep≈Çyw netto {current_year}",
            format_currency(net_flow),
            delta=format_currency(net_flow) if net_flow != 0 else None
        )
    
    with col3:
        total_deposits = summary.get('total_deposits', 0) or 0
        st.metric(
            f"‚¨áÔ∏è Wp≈Çaty {current_year}",
            format_currency(total_deposits)
        )
    
    with col4:
        total_withdrawals = summary.get('total_withdrawals', 0) or 0
        st.metric(
            f"‚¨ÜÔ∏è Wyp≈Çaty {current_year}",
            format_currency(total_withdrawals)
        )
    
    # Dodatkowe metryki
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        dividends = summary.get('total_dividends', 0) or 0
        st.metric("üíé Dywidendy", format_currency(dividends))
    
    with col2:
        option_premiums = summary.get('total_option_premiums', 0) or 0
        st.metric("üéØ Premium opcje", format_currency(option_premiums))
    
    with col3:
        commissions = summary.get('total_commissions', 0) or 0
        st.metric("üí∏ Prowizje", format_currency(commissions))
    
    with col4:
        taxes = summary.get('total_taxes', 0) or 0
        st.metric("üßæ Podatki", format_currency(taxes))
    
    # Przeliczenie na PLN - NAPRAWIONE
    current_usd_rate = nbp_service.get_current_usd_rate()
    if current_usd_rate and current_usd_rate > 0:
        st.markdown("#### üáµüá± Warto≈õci w PLN")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            balance_pln = account_balance * current_usd_rate
            st.metric(
                "üí∞ Stan konta (PLN)",
                format_currency(balance_pln, "PLN")
            )
        
        with col2:
            # NAPRAWIONE - zabezpieczenie przed None
        if current_usd_rate and current_usd_rate > 0:
            net_flow_pln = net_flow * current_usd_rate
        else:
            net_flow_pln = 0.0
            st.metric(
                f"üìä Przep≈Çyw netto {current_year} (PLN)",
                format_currency(net_flow_pln, "PLN")
            )
        
        with col3:
            st.info(f"üí± Kurs USD/PLN: {current_usd_rate:.4f}")
    else:
        st.warning("‚ö†Ô∏è Nie mo≈ºna pobraƒá kursu USD/PLN z NBP")
    
    # Status konta MARGIN
    show_margin_status()
    
    # Wykres miesiƒôczny
    monthly_cashflows = CashflowRepository.get_monthly_cashflows(current_year)
    
    if monthly_cashflows:
        st.markdown("#### üìà Miesiƒôczne przep≈Çywy pieniƒô≈ºne")
        
        df = pd.DataFrame(monthly_cashflows)
        
        fig = go.Figure()
        
        # Wp≈Çywy
        fig.add_trace(go.Bar(
            x=df['year_month'],
            y=df['inflows'],
            name='Wp≈Çywy',
            marker_color='green',
            text=[format_currency(x) for x in df['inflows']],
            textposition='auto'
        ))
        
        # Wyp≈Çywy
        fig.add_trace(go.Bar(
            x=df['year_month'],
            y=-df['outflows'],  # Ujemne dla lepszej wizualizacji
            name='Wyp≈Çywy',
            marker_color='red',
            text=[format_currency(x) for x in df['outflows']],
            textposition='auto'
        ))
        
        # Przep≈Çyw netto jako linia
        fig.add_trace(go.Scatter(
            x=df['year_month'],
            y=df['net_flow'],
            mode='lines+markers',
            name='Przep≈Çyw netto',
            line=dict(color='blue', width=3),
            marker=dict(size=8)
        ))
        
        fig.update_layout(
            title=f"Przep≈Çywy pieniƒô≈ºne {current_year}",
            xaxis_title="MiesiƒÖc",
            yaxis_title="Kwota (USD)",
            height=500,
            barmode='relative'
        )
        
        # Dodaj liniƒô zerowƒÖ
        fig.add_hline(y=0, line_dash="dash", line_color="gray", opacity=0.5)
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Ostatnie przep≈Çywy
    st.markdown("#### üìã Ostatnie przep≈Çywy")
    
    recent_cashflows = CashflowRepository.get_all_cashflows()[:10]  # Ostatnie 10
    
    if recent_cashflows:
        df = pd.DataFrame(recent_cashflows)
        
        # Formatowanie
        display_df = df.copy()
        display_df['amount_usd'] = display_df.apply(lambda row: 
            format_gain_loss(row['amount_usd'] if row['transaction_type'] in ['DEPOSIT', 'DIVIDEND', 'OPTION_PREMIUM'] 
                           else -row['amount_usd'])[0], axis=1)
        display_df['date'] = pd.to_datetime(display_df['date']).dt.strftime('%d.%m.%Y')
        
        # Mapowanie typ√≥w transakcji
        type_map = {
            'DEPOSIT': '‚¨áÔ∏è Wp≈Çata',
            'WITHDRAWAL': '‚¨ÜÔ∏è Wyp≈Çata',
            'DIVIDEND': 'üíé Dywidenda',
            'OPTION_PREMIUM': 'üéØ Premium opcji',
            'COMMISSION': 'üí∏ Prowizja',
            'TAX': 'üßæ Podatek',
            'MARGIN_INTEREST': 'üè¶ Odsetki margin',
            'MARGIN_CALL': '‚ö†Ô∏è Margin call'
        }
        display_df['transaction_type'] = display_df['transaction_type'].map(type_map)
        
        st.dataframe(
            display_df[[
                'date', 'transaction_type', 'amount_usd', 'description', 'stock_symbol'
            ]].rename(columns={
                'date': 'Data',
                'transaction_type': 'Typ',
                'amount_usd': 'Kwota',
                'description': 'Opis',
                'stock_symbol': 'Akcja'
            }),
            use_container_width=True,
            hide_index=True
        )
    
    else:
        st.info("Brak zarejestrowanych przep≈Çyw√≥w pieniƒô≈ºnych.")

def show_margin_status():
    """Wy≈õwietla status konta MARGIN."""
    
    st.markdown("#### üè¶ Status konta MARGIN")
    
    # Pobierz dane o pozycjach i stanie konta
    account_balance = CashflowRepository.get_account_balance()
    
    # Pobierz warto≈õƒá portfela
    try:
        from db import execute_query
        portfolio_value_query = """
            SELECT SUM(quantity * current_price_usd) as total_value
            FROM stocks
            WHERE quantity > 0
        """
        portfolio_result = execute_query(portfolio_value_query)
        portfolio_value = portfolio_result[0]['total_value'] if portfolio_result and portfolio_result[0]['total_value'] else 0
    except:
        portfolio_value = 0
    
    # Oblicz equity i margin
    total_equity = account_balance + portfolio_value
    margin_used = max(0, -account_balance)  # Ujemny balans = u≈ºywana po≈ºyczka
    margin_available = calculate_margin_available(portfolio_value, margin_used)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üí∞ Total Equity", format_currency(total_equity))
        
    with col2:
        margin_color = "red" if margin_used > 0 else "green"
        st.metric("üè¶ Margin u≈ºywany", format_currency(margin_used))
        
    with col3:
        st.metric("üìä Margin dostƒôpny", format_currency(margin_available))
        
    with col4:
        margin_ratio = (margin_used / total_equity * 100) if total_equity > 0 else 0
        color = "red" if margin_ratio > 50 else "orange" if margin_ratio > 25 else "green"
        st.metric("‚ö†Ô∏è Margin ratio", f"{margin_ratio:.1f}%")
    
    # Ostrze≈ºenia
    if margin_ratio > 80:
        st.error("üö® MARGIN CALL RISK! Bardzo wysokie wykorzystanie margin!")
    elif margin_ratio > 50:
        st.warning("‚ö†Ô∏è Wysokie wykorzystanie margin. Rozwa≈º redukcjƒô pozycji.")
    elif margin_used > 0:
        st.info("‚ÑπÔ∏è Korzystasz z margin. Monitoruj poziom ryzyka.")

def calculate_margin_available(portfolio_value, margin_used):
    """Oblicza dostƒôpny margin (uproszczony model)."""
    # Prostych model: 50% warto≈õci portfela jako collateral
    max_margin = portfolio_value * 0.5
    return max(0, max_margin - margin_used)

def show_add_cashflow_tab():
    """Formularz dodawania nowego przep≈Çywu pieniƒô≈ºnego."""
    
    st.markdown("### ‚ûï Dodaj przep≈Çyw pieniƒô≈ºny")
    
    with st.form("add_cashflow_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            # Typ transakcji - ROZSZERZONY O MARGIN
            transaction_type = st.selectbox(
                "Typ transakcji *",
                ["DEPOSIT", "WITHDRAWAL", "DIVIDEND", "OPTION_PREMIUM", "COMMISSION", "TAX", "MARGIN_INTEREST", "MARGIN_CALL"],
                format_func=lambda x: {
                    "DEPOSIT": "‚¨áÔ∏è Wp≈Çata",
                    "WITHDRAWAL": "‚¨ÜÔ∏è Wyp≈Çata", 
                    "DIVIDEND": "üíé Dywidenda",
                    "OPTION_PREMIUM": "üéØ Premium opcji",
                    "COMMISSION": "üí∏ Prowizja",
                    "TAX": "üßæ Podatek",
                    "MARGIN_INTEREST": "üè¶ Odsetki margin",
                    "MARGIN_CALL": "‚ö†Ô∏è Margin call"
                }[x]
            )
            
            # Kwota
            amount = st.number_input(
                "Kwota (USD) *",
                min_value=0.01,
                value=100.0,
                step=0.01,
                format="%.2f"
            )
        
        with col2:
            # Data
            transaction_date = st.date_input(
                "Data *",
                value=date.today(),
                max_value=date.today()
            )
            
            # PowiƒÖzana akcja (opcjonalne)
            stocks = StockRepository.get_all_stocks()
            stock_options = [None] + stocks
            
            related_stock = st.selectbox(
                "PowiƒÖzana akcja",
                options=stock_options,
                format_func=lambda x: "Brak" if x is None else f"{x['symbol']} - {x['name']}"
            )
        
        # Opis
        description = st.text_area(
            "Opis",
            placeholder="Opcjonalny opis transakcji..."
        )
        
        # Informacja o wp≈Çywie na stan konta
        if transaction_type in ['DEPOSIT', 'DIVIDEND', 'OPTION_PREMIUM']:
            impact = f"‚¨ÜÔ∏è Zwiƒôkszy stan konta o {format_currency(amount)}"
            impact_color = "green"
        else:
            impact = f"‚¨áÔ∏è Zmniejszy stan konta o {format_currency(amount)}"
            impact_color = "red"
        
        st.info(impact)
        
        # Dodatkowe ostrze≈ºenia dla margin
        if transaction_type in ['MARGIN_INTEREST', 'MARGIN_CALL']:
            st.warning("‚ö†Ô∏è To transakcja zwiƒÖzana z margin. Sprawd≈∫ wp≈Çyw na poziom ryzyka.")
        
        # Przycisk dodania
        submitted = st.form_submit_button(
            "üíæ Dodaj przep≈Çyw",
            type="primary",
            use_container_width=True
        )
        
        if submitted:
            try:
                cashflow_id = CashflowRepository.add_cashflow(
                    transaction_type=transaction_type,
                    amount_usd=amount,
                    date_value=transaction_date,
                    description=description,
                    related_stock_id=related_stock['id'] if related_stock else None
                )
                
                st.success(f"‚úÖ Przep≈Çyw zosta≈Ç dodany! (ID: {cashflow_id})")
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå B≈ÇƒÖd podczas dodawania przep≈Çywu: {str(e)}")

def show_margin_tab():
    """Wy≈õwietla szczeg√≥≈ÇowƒÖ analizƒô margin."""
    
    st.markdown("### üè¶ Analiza konta MARGIN")
    
    st.info("""
    **üìã Informacje o koncie MARGIN:**
    
    - Mo≈ºliwo≈õƒá po≈ºyczania ≈õrodk√≥w na zakup akcji
    - Wymagane zabezpieczenie (collateral) w postaci akcji
    - Odsetki od po≈ºyczonej kwoty
    - Ryzyko margin call przy spadku warto≈õci portfela
    """)
    
    # Aktualne parametry margin
    account_balance = CashflowRepository.get_account_balance()
    
    try:
        from db import execute_query
        portfolio_value_query = """
            SELECT SUM(quantity * current_price_usd) as total_value
            FROM stocks
            WHERE quantity > 0
        """
        portfolio_result = execute_query(portfolio_value_query)
        portfolio_value = portfolio_result[0]['total_value'] if portfolio_result and portfolio_result[0]['total_value'] else 0
    except:
        portfolio_value = 0
    
    total_equity = account_balance + portfolio_value
    margin_used = max(0, -account_balance)
    margin_available = calculate_margin_available(portfolio_value, margin_used)
    maintenance_margin = portfolio_value * 0.25  # 25% maintenance margin
    
    # G≈Ç√≥wne metryki
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üí∞ Warto≈õci konta**")
        st.metric("Warto≈õƒá portfela", format_currency(portfolio_value))
        st.metric("Stan ≈õrodk√≥w", format_currency(account_balance))
        st.metric("Total Equity", format_currency(total_equity))
    
    with col2:
        st.markdown("**üè¶ Margin Status**")
        st.metric("Margin u≈ºywany", format_currency(margin_used))
        st.metric("Margin dostƒôpny", format_currency(margin_available))
        st.metric("Maintenance margin", format_currency(maintenance_margin))
    
    with col3:
        st.markdown("**‚ö†Ô∏è Poziomy ryzyka**")
        margin_ratio = (margin_used / total_equity * 100) if total_equity > 0 else 0
        st.metric("Margin ratio", f"{margin_ratio:.1f}%")
        
        equity_ratio = (total_equity / (total_equity + margin_used) * 100) if (total_equity + margin_used) > 0 else 100
        st.metric("Equity ratio", f"{equity_ratio:.1f}%")
        
        # Cena margin call
        if margin_used > 0:
            margin_call_value = margin_used / 0.25  # 25% maintenance
            margin_call_drop = ((portfolio_value - margin_call_value) / portfolio_value * 100) if portfolio_value > 0 else 0
            st.metric("Spadek do margin call", f"{margin_call_drop:.1f}%")
    
    # Wykres poziom√≥w ryzyka
    st.markdown("#### üìä Wizualizacja poziom√≥w ryzyka")
    
    # Symulacja r√≥≈ºnych scenariuszy spadku portfela
    portfolio_drops = list(range(0, 61, 5))  # 0% do 60% spadku
    scenarios = []
    
    for drop_pct in portfolio_drops:
        new_portfolio_value = portfolio_value * (1 - drop_pct/100)
        new_equity = account_balance + new_portfolio_value
        new_margin_ratio = (margin_used / new_equity * 100) if new_equity > 0 else 100
        
        scenarios.append({
            'drop_pct': drop_pct,
            'portfolio_value': new_portfolio_value,
            'equity': new_equity,
            'margin_ratio': new_margin_ratio
        })
    
    if scenarios:
        df = pd.DataFrame(scenarios)
        
        fig = go.Figure()
        
        # Linia margin ratio
        fig.add_trace(go.Scatter(
            x=df['drop_pct'],
            y=df['margin_ratio'],
            mode='lines+markers',
            name='Margin Ratio',
            line=dict(color='blue', width=3)
        ))
        
        # Linie ostrze≈ºe≈Ñ
        fig.add_hline(y=25, line_dash="dash", line_color="orange", 
                     annotation_text="‚ö†Ô∏è Ostrze≈ºenie (25%)")
        fig.add_hline(y=50, line_dash="dash", line_color="red",
                     annotation_text="üö® Margin Call (50%)")
        fig.add_hline(y=80, line_dash="dash", line_color="darkred",
                     annotation_text="üíÄ Liquidacja (80%)")
        
        fig.update_layout(
            title="Scenariusze spadku warto≈õci portfela",
            xaxis_title="Spadek warto≈õci portfela (%)",
            yaxis_title="Margin Ratio (%)",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Historia margin
    st.markdown("#### üìà Historia koszt√≥w margin")
    
    # Pobierz historiƒô odsetek margin
    margin_history = CashflowRepository.get_cashflows_by_type('MARGIN_INTEREST')
    
    if margin_history:
        df = pd.DataFrame(margin_history)
        df['date'] = pd.to_datetime(df['date'])
        
        # Grupuj wed≈Çug miesiƒôcy
        monthly_interest = df.groupby(df['date'].dt.to_period('M'))['amount_usd'].sum().reset_index()
        monthly_interest['month'] = monthly_interest['date'].dt.strftime('%Y-%m')
        
        fig = px.bar(
            monthly_interest,
            x='month',
            y='amount_usd',
            title="Miesiƒôczne koszty margin (odsetki)",
            labels={'amount_usd': 'Odsetki (USD)', 'month': 'MiesiƒÖc'}
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Suma koszt√≥w
        total_margin_cost = df['amount_usd'].sum()
        avg_monthly_cost = total_margin_cost / len(monthly_interest) if len(monthly_interest) > 0 else 0
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üí∏ ≈ÅƒÖczne koszty margin", format_currency(total_margin_cost))
        with col2:
            st.metric("üìä ≈örednie koszty miesiƒôczne", format_currency(avg_monthly_cost))
    
    else:
        st.info("Brak historii koszt√≥w margin.")
    
    # Kalkulator margin
    st.markdown("#### üßÆ Kalkulator margin")
    
    with st.expander("Oblicz dostƒôpny margin"):
        col1, col2 = st.columns(2)
        
        with col1:
            test_portfolio_value = st.number_input(
                "Testowa warto≈õƒá portfela (USD)",
                min_value=0.0,
                value=float(portfolio_value),
                step=1000.0
            )
            
            margin_rate = st.slider(
                "Oprocentowanie margin (%/rok)",
                min_value=0.0,
                max_value=15.0,
                value=7.0,
                step=0.1
            )
        
        with col2:
            max_margin_calc = test_portfolio_value * 0.5
            monthly_interest_rate = margin_rate / 100 / 12
            
            st.metric("üí∞ Max margin dostƒôpny", format_currency(max_margin_calc))
            
            if st.button("üßÆ Oblicz koszty margin"):
                if max_margin_calc > 0:
                    monthly_cost = max_margin_calc * monthly_interest_rate
                    annual_cost = monthly_cost * 12
                    
                    st.metric("üí∏ Koszt miesiƒôczny (max margin)", format_currency(monthly_cost))
                    st.metric("üí∏ Koszt roczny (max margin)", format_currency(annual_cost))
    
    # Wskaz√≥wki bezpiecze≈Ñstwa
    st.markdown("#### ‚ö†Ô∏è Zasady bezpiecze≈Ñstwa margin")
    
    st.warning("""
    **üõ°Ô∏è Wa≈ºne zasady przy korzystaniu z margin:**
    
    1. **Nie przekraczaj 25% margin ratio** - pozostaw bufor bezpiecze≈Ñstwa
    2. **Monitoruj portfel codziennie** - szczeg√≥lnie w okresach wysokiej zmienno≈õci
    3. **Miej plan zarzƒÖdzania ryzykiem** - ustal poziomy stop-loss
    4. **Pamiƒôtaj o kosztach** - odsetki margin obni≈ºajƒÖ zwrot z inwestycji
    5. **Diversyfikuj pozycje** - nie koncentruj ca≈Çego margin na jednej akcji
    6. **Utrzymuj rezerwy got√≥wkowe** - na wypadek margin call
    
    üí° **Margin mo≈ºe zwiƒôkszyƒá zar√≥wno zyski jak i straty!**
    """)

# Pozosta≈Çe funkcje bez zmian...
def show_analysis_tab():
    """Wy≈õwietla analizƒô przep≈Çyw√≥w pieniƒô≈ºnych."""
    
    st.markdown("### üìà Analiza przep≈Çyw√≥w pieniƒô≈ºnych")
    
    # Wyb√≥r okresu analizy
    col1, col2 = st.columns(2)
    
    with col1:
        start_date = st.date_input(
            "Data od",
            value=date.today() - timedelta(days=365)
        )
    
    with col2:
        end_date = st.date_input(
            "Data do",
            value=date.today()
        )
    
    if start_date > end_date:
        st.error("Data poczƒÖtkowa nie mo≈ºe byƒá p√≥≈∫niejsza ni≈º ko≈Ñcowa!")
        return
    
    # Pobierz dane z wybranego okresu
    period_cashflows = CashflowRepository.get_cashflows_by_date_range(start_date, end_date)
    
    if period_cashflows:
        df = pd.DataFrame(period_cashflows)
        
        # Analiza wed≈Çug typu transakcji
        st.markdown("#### üìä Rozk≈Çad wed≈Çug typu transakcji")
        
        type_analysis = df.groupby('transaction_type')['amount_usd'].sum().reset_index()
        type_analysis['transaction_type'] = type_analysis['transaction_type'].map({
            'DEPOSIT': 'Wp≈Çaty',
            'WITHDRAWAL': 'Wyp≈Çaty',
            'DIVIDEND': 'Dywidendy',
            'OPTION_PREMIUM': 'Premium opcji',
            'COMMISSION': 'Prowizje',
            'TAX': 'Podatki',
            'MARGIN_INTEREST': 'Odsetki margin',
            'MARGIN_CALL': 'Margin call'
        })
        
        # Wykres ko≈Çowy
        fig = px.pie(
            type_analysis,
            values='amount_usd',
            names='transaction_type',
            title=f"Rozk≈Çad przep≈Çyw√≥w ({start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')})"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Pozosta≈Ça czƒô≈õƒá funkcji bez zmian...
    
    else:
        st.info(f"Brak przep≈Çyw√≥w w okresie {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")

def show_history_tab():
    """Wy≈õwietla pe≈ÇnƒÖ historiƒô przep≈Çyw√≥w pieniƒô≈ºnych."""
    
    st.markdown("### üìã Historia przep≈Çyw√≥w pieniƒô≈ºnych")
    
    # Filtry
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Filtr typu transakcji - ROZSZERZONY
        type_filter = st.selectbox(
            "Typ transakcji",
            ["Wszystkie", "DEPOSIT", "WITHDRAWAL", "DIVIDEND", "OPTION_PREMIUM", "COMMISSION", "TAX", "MARGIN_INTEREST", "MARGIN_CALL"],
            format_func=lambda x: x if x == "Wszystkie" else {
                "DEPOSIT": "‚¨áÔ∏è Wp≈Çaty",
                "WITHDRAWAL": "‚¨ÜÔ∏è Wyp≈Çaty",
                "DIVIDEND": "üíé Dywidendy",
                "OPTION_PREMIUM": "üéØ Premium opcji",
                "COMMISSION": "üí∏ Prowizje",
                "TAX": "üßæ Podatki",
                "MARGIN_INTEREST": "üè¶ Odsetki margin",
                "MARGIN_CALL": "‚ö†Ô∏è Margin call"
            }[x]
        )
    
    # Pozosta≈Ça czƒô≈õƒá funkcji bez wiƒôkszych zmian...

def show_roi_tab():
    """Wy≈õwietla analizƒô zwrotu z inwestycji (ROI)."""
    # Ta funkcja pozostaje bez zmian
    pass